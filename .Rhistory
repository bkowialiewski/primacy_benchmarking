values <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(language = languages[i], values = values))
}
# get summary statistics
agg <- aggregate(values~language, data, mean)
se <- aggregate(values~language, data, sd)$values/sqrt(n)
agg
# confidence interval is ~standard deviation times 1.96
agg$CI <- se * 1.96
agg$CI
agg
# get data from folders here
data <- read.delim(fname, sep = '', header = FALSE)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
# get data from folders here
data <- read.delim(fname, sep = '', header = FALSE)
data
# get data from folders here
scores <- unlist(read.delim(fname, sep = '', header = FALSE))
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
n_items <- 6
# get data from folders here
scores <- unlist(read.delim(fname, sep = '', header = FALSE))
scores
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
n_items <- 6
# get data from folders here
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
n_items <- 6
# get data from folders here
scores <- unlist(read.delim(fname, sep = '', header = FALSE))
data <- data.frame(x = 1:n_items, values = scores)
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Rust', 'Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores_model.svg')
ggsave(fname, g, width = 4, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
n_items <- 6
# get data from folders here
scores <- unlist(read.delim(fname, sep = '', header = FALSE))
data <- data.frame(x = 1:n_items, values = scores)
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(size = 2.5)
g <- g + geom_line(size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores_empirical.svg')
ggsave(fname, g, width = 4, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
n_items <- 6
# get data from folders here
scores <- unlist(read.delim(fname, sep = '', header = FALSE))
data <- data.frame(x = 1:n_items, values = scores)
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(size = 2.5)
g <- g + geom_line(size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores_empirical.svg')
ggsave(fname, g, width = 3.5, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
n_items <- 6
# get data from folders here
scores <- unlist(read.delim(fname, sep = '', header = FALSE))
data <- data.frame(x = 1:n_items, values = scores)
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(size = 2.5)
g <- g + geom_line(size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores_empirical.svg')
ggsave(fname, g, width = 3, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Rust', 'Julia', 'MATLAB', 'R')
fname <- 'results/output.txt'
# number of observations / languages
n <- 1000
# get data from folders here
data <- data.frame(language = NULL, values = NULL)
for (i in 1:length(languages)) {
values <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(language = languages[i], values = values))
}
# get summary statistics
agg <- aggregate(values~language, data, mean)
se <- aggregate(values~language, data, sd)$values/sqrt(n)
# confidence interval is ~standard deviation times 1.96
agg$CI <- se * 1.96
# agg$values <- agg$values / agg$values[agg$language == "Rust"]
# redefine the levels - important when plotting using ggplot2
levels(agg$language) <- languages
# do the actual plotting
g <- ggplot(agg, aes(x = language, y = values))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_errorbar(aes(ymin = values - CI, ymax = values + CI, colour = language), width = 0.2)
g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, max(agg$CI + agg$values)))
g <- g + ylab('Running time (in milliseconds)')
g <- g + xlab('Programming languages')
g <- g + theme(legend.position = "none")
g
fname <- here('plot', 'comparison.svg')
ggsave(fname, g, width = 4, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
fname <- 'empirical_data/score.txt'
n_items <- 6
# get data from folders here
scores <- unlist(read.delim(fname, sep = '', header = FALSE))
data <- data.frame(x = 1:n_items, values = scores)
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(size = 2.5)
g <- g + geom_line(size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores_empirical.svg')
ggsave(fname, g, width = 3, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Rust', 'Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores_model.svg')
ggsave(fname, g, width = 4, height = 3.5)
rm(list =)
rm(list = ls())
rm(list = ls())
n <- 100
sample <- sample(1:n, 50)
mean(1:10)
mean(1:100)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
sample <- matrix(sample(1:n, sub*nSim), nrow = nSim, ncol = sub)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
sample <- mean(sample(1:n, sub*nSim))
sample <- mean(sample(1:n, sub))
sample
sub
sample <- mean(sample(1:n, sub))
sample
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 100
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 90
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 10
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 60
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 60
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 70
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 70
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 80
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 90
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 70
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 60
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = FALSE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 50
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 60
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 70
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 80
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
rm(list = ls())
nSim <- 10^5
n <- 100
sub <- 90
mu <- rep(0, nSim)
for (i in 1:nSim) {
mu[i] <- mean(sample(1:n, sub, replace = TRUE))
}
hist(mu)
sd(mu)
