scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = values))
g <- g + geom_point(aes(colour = language), size = 2.5)
g
# do the actual plotting
g <- ggplot(data, aes(x = x, y = values))
g
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g
g <- g + geom_point(aes(colour = language), size = 2.5)
g
g <- g + geom_errorbar(aes(ymin = values - CI, ymax = values + CI, colour = language), width = 0.2)
g <- g + scale_x_discrete(limits = languages)
g
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
# g <- g + scale_x_discrete(limits = languages)
g
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g)
g <- g + geom_line(aes(colour = language), size = 2.5)
g
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language))
g
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g)
g <- g + scale_x_continuous(limits = c(0, n_items))
g
g <- g + scale_x_continuous(limits = c(0, n_items), breaks = seq(0,n_items,1))
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(0, n_items), breaks = seq(0,n_items,1))
g
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = 1:n_items, breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = 1:n_items, breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
seq(1,n_items,1)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(0,1), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(0,1), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g
g <- g + scale_x_continuous(limits = c(0,1), breaks = seq(1,n_items,1))
g
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(0,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g, width = 5, height = 5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g, width = 4, height = 4)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g, width = 3.5, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g, width = 4, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Rust', 'Julia', 'MATLAB', 'R')
fname <- 'results/output.txt'
# number of observations / languages
n <- 1000
# get data from folders here
data <- data.frame(language = NULL, values = NULL)
for (i in 1:length(languages)) {
values <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(language = languages[i], values = values))
}
# get summary statistics
agg <- aggregate(values~language, data, mean)
se <- aggregate(values~language, data, sd)$values/sqrt(n)
# confidence interval is ~standard deviation times 1.96
agg$CI <- se * 1.96
# agg$values <- agg$values / agg$values[agg$language == "Rust"]
# redefine the levels - important when plotting using ggplot2
levels(agg$language) <- languages
# do the actual plotting
g <- ggplot(agg, aes(x = language, y = values))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_errorbar(aes(ymin = values - CI, ymax = values + CI, colour = language), width = 0.2)
g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, max(agg$CI + agg$values)))
g <- g + ylab('Running time (in milliseconds)')
g <- g + xlab('Programming languages')
g <- g + theme(legend.position = "none")
g
fname <- here('plot', 'comparison.svg')
ggsave(fname, g, width = 4, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Rust', 'Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g, width = 4, height = 3.5)
data
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Rust', 'Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g, width = 4, height = 3.5)
rm(list = ls())
require('here')
require('ggplot2')
# list of languages
languages <- c('Rust', 'Julia', 'MATLAB', 'R')
fname <- 'results/score.txt'
n_items <- 6
# get data from folders here
data <- data.frame(x = NULL, language = NULL, values = NULL)
for (i in 1:length(languages)) {
scores <- unlist(read.delim(here(languages[i], fname), sep = '', header = FALSE))
data <- rbind(data, data.frame(x = 1:n_items, language = languages[i], scores = scores))
}
# redefine the levels - important when plotting using ggplot2
levels(data$language) <- languages
# do the actual plotting
g <- ggplot(data, aes(x = x, y = scores))
g <- g + geom_point(aes(colour = language), size = 2.5)
g <- g + geom_line(aes(colour = language), size = 1.5)
# g <- g + scale_x_discrete(limits = languages)
g <- g + scale_y_continuous(limits = c(0, 1.0))
g <- g + scale_x_continuous(limits = c(1,n_items), breaks = seq(1,n_items,1))
g <- g + ylab('p(correct)')
g <- g + xlab('Serial position')
g
fname <- here('plot', 'scores.svg')
ggsave(fname, g, width = 4, height = 3.5)
deltas <- c(0, 2)
relativeL <- exp(-0.5 * deltas)
weights <- relativeL / sum(relativeL)
print(weights)
weights[1]/weights[2]
deltas <- c(0, 3)
relativeL <- exp(-0.5 * deltas)
weights <- relativeL / sum(relativeL)
print(weights)
weights[1]/weights[2]
weights[1]/weights[2]
