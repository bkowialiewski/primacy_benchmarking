source(here('functions', function_files[i]))
}
main <- function() {
start <- Sys.time()
S <- list(n_sim = 10^4,
n_items = 7)
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
M <- genMatrices(S)
M <- core(S, Free, M)
end <- Sys.time()
elapsed <- end-start
print(elapsed)
print(M$score)
}
main()
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
start <- Sys.time()
S <- list(n_sim = 10^4,
n_items = 7)
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
M <- genMatrices(S)
M <- core(S, Free, M)
end <- Sys.time()
elapsed <- end-start
print(elapsed)
print(M$score)
}
main()
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
start <- Sys.time()
S <- list(n_sim = 10^4,
n_items = 7)
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
M <- genMatrices(S)
M <- core(S, Free, M)
end <- Sys.time()
elapsed <- end-start
print(elapsed)
plot(1:S$n_items, M$score)
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
start <- Sys.time()
S <- list(n_sim = 10^4,
n_items = 7)
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
M <- genMatrices(S)
M <- core(S, Free, M)
end <- Sys.time()
elapsed <- end-start
print(elapsed)
plot(1:S$n_items, M$score, type = 'b')
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
start <- Sys.time()
S <- list(n_sim = 10^4,
n_items = 7)
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
M <- genMatrices(S)
M <- core(S, Free, M)
end <- Sys.time()
elapsed <- end-start
print(elapsed)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
source("C:/projects/primacy_benchmarking/R/functions/retrieval.R")
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed <- end-start
print(elapsed)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 10
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table('output.txt', mean(elapsed))
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 10
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(mean(elapsed), 'output.txt')
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 10
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(mean(elapsed), 'output.txt', header = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 10
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(mean(elapsed), 'output.txt', row.names = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
test1 <- Sys.time()
test2 <- Sys.time()
test2-test1
(test2-test1)
a <- (test2-test1)
a
a * 1000
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 10
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(mean(elapsed) * 1000, 'output.txt', row.names = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 1000
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(mean(elapsed) * 1000, 'output.txt', row.names = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 10
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(elapsed * 1000, 'output.txt', row.names = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
nBench <- 1000
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 7)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(elapsed * 1000, 'output.txt', row.names = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
# create structure for fixed parameters
S <- list(n_sim = 10^5,
n_items = 6)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
write.table(M$score, 'results/scores.txt', row.names = FALSE, col.names = FALSE)
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
benchmarking <- function() {
nBench <- 1000
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 6)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(elapsed * 1000, 'results/output.txt', row.names = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
benchmarking <- function() {
nBench <- 1000
elapsed <- rep(0, nBench)
for (epoch in 1:nBench) {
# required to benchmark the model
start <- Sys.time()
# create structure for fixed parameters
S <- list(n_sim = 10^4,
n_items = 6)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
end <- Sys.time()
elapsed[epoch] <- end-start
print(epoch)
}
write.table(elapsed * 1000, 'results/output.txt', row.names = FALSE, col.names = FALSE)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
}
benchmarking()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
# create structure for fixed parameters
S <- list(n_sim = 10^5,
n_items = 6)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
write.table(M$score, 'results/scores.txt', row.names = FALSE, col.names = FALSE)
}
main()
require('here')
function_files <- list.files(here('functions'))
for (i in 1:length(function_files)) {
source(here('functions', function_files[i]))
}
main <- function() {
# create structure for fixed parameters
S <- list(n_sim = 10^5,
n_items = 6)
# free parameters
Free <- list(alpha = 10.0,
gamma = 0.9,
sigma = 0.5,
delta = 0.8)
# pre-allocate matrices
M <- genMatrices(S)
# core function of the model
M <- core(S, Free, M)
plot(1:S$n_items, M$score, type = 'b', xlim = c(1, S$n_items), ylim = c(0,1))
write.table(M$score, 'results/score.txt', row.names = FALSE, col.names = FALSE)
}
main()
